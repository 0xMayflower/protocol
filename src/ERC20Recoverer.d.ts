/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC20RecovererInterface extends ethers.utils.Interface {
  functions: {
    "disable(address)": FunctionFragment;
    "disablePermanently(address)": FunctionFragment;
    "enable(address)": FunctionFragment;
    "nonRecoverable(address)": FunctionFragment;
    "permanentlyNonRecoverable(address)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverer()": FunctionFragment;
    "setRecoverer(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "disable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "disablePermanently",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "enable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nonRecoverable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "permanentlyNonRecoverable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "recoverer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRecoverer",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disablePermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonRecoverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentlyNonRecoverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecoverer",
    data: BytesLike
  ): Result;

  events: {
    "Recovered(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
}

export class ERC20Recoverer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC20RecovererInterface;

  functions: {
    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverer(overrides?: CallOverrides): Promise<[string]>;

    "recoverer()"(overrides?: CallOverrides): Promise<[string]>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  disable(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disable(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disablePermanently(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disablePermanently(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enable(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enable(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "nonRecoverable(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  permanentlyNonRecoverable(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "permanentlyNonRecoverable(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverer(overrides?: CallOverrides): Promise<string>;

  "recoverer()"(overrides?: CallOverrides): Promise<string>;

  setRecoverer(
    _recoverer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecoverer(address)"(
    _recoverer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disable(_contract: string, overrides?: CallOverrides): Promise<void>;

    "disable(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disablePermanently(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enable(_contract: string, overrides?: CallOverrides): Promise<void>;

    "enable(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverer(overrides?: CallOverrides): Promise<string>;

    "recoverer()"(overrides?: CallOverrides): Promise<string>;

    setRecoverer(_recoverer: string, overrides?: CallOverrides): Promise<void>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Recovered(
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverer(overrides?: CallOverrides): Promise<BigNumber>;

    "recoverer()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recoverer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
