/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC20BurnMiningV1FactoryInterface extends ethers.utils.Interface {
  functions: {
    "newPool(address,address,address)": FunctionFragment;
    "poolAddress(address,address)": FunctionFragment;
    "poolSig()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "newPool",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "poolSig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "newPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolSig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "NewMiningPool(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMiningPool"): EventFragment;
}

export class ERC20BurnMiningV1Factory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC20BurnMiningV1FactoryInterface;

  functions: {
    newPool(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newPool(address,address,address)"(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolAddress(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _pool: string }>;

    "poolAddress(address,address)"(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { _pool: string }>;

    poolSig(overrides?: CallOverrides): Promise<[string]>;

    "poolSig()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  newPool(
    _emitter: string,
    _baseToken: string,
    _recoverTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newPool(address,address,address)"(
    _emitter: string,
    _baseToken: string,
    _recoverTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolAddress(
    _emitter: string,
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "poolAddress(address,address)"(
    _emitter: string,
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  poolSig(overrides?: CallOverrides): Promise<string>;

  "poolSig()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    newPool(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "newPool(address,address,address)"(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    poolAddress(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolAddress(address,address)"(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    poolSig(overrides?: CallOverrides): Promise<string>;

    "poolSig()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    NewMiningPool(
      _emitter: null,
      _stakingToken: null,
      _recoverTo: null,
      _poolAddress: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        _emitter: string;
        _stakingToken: string;
        _recoverTo: string;
        _poolAddress: string;
      }
    >;
  };

  estimateGas: {
    newPool(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newPool(address,address,address)"(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolAddress(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolAddress(address,address)"(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolSig(overrides?: CallOverrides): Promise<BigNumber>;

    "poolSig()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    newPool(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newPool(address,address,address)"(
      _emitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolAddress(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolAddress(address,address)"(
      _emitter: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolSig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolSig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
