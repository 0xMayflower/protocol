/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "RATE_DENOMINATOR()": FunctionFragment;
    "addStocks(address,uint256)": FunctionFragment;
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "buy(address,uint256)": FunctionFragment;
    "disable(address)": FunctionFragment;
    "disablePermanently(address)": FunctionFragment;
    "enable(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "gov()": FunctionFragment;
    "launchNewProduct(string,string,string,string,uint256,uint256,uint256)": FunctionFragment;
    "launchNewProductWithMaxSupply(string,string,string,string,uint256,uint256,uint256,uint256)": FunctionFragment;
    "nonRecoverable(address)": FunctionFragment;
    "permanentlyNonRecoverable(address)": FunctionFragment;
    "products(address)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverer()": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setPrice(address,uint256)": FunctionFragment;
    "setProfitRate(address,uint256)": FunctionFragment;
    "setRecoverer(address)": FunctionFragment;
    "setTaxRate(uint256)": FunctionFragment;
    "taxRate()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "disable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "disablePermanently",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "enable", values: [string]): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "launchNewProduct",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "launchNewProductWithMaxSupply",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonRecoverable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "permanentlyNonRecoverable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "products", values: [string]): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "recoverer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoverer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disablePermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchNewProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchNewProductWithMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonRecoverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentlyNonRecoverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProfitRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoverer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;

  events: {
    "Anarchized()": EventFragment;
    "FactoryChanged(address,address)": EventFragment;
    "NewGovernance(address,address)": EventFragment;
    "PriceUpdated(address,uint256)": EventFragment;
    "ProductLaunched(address,address)": EventFragment;
    "ProfitRateUpdated(address,uint256)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "Supply(address,uint256)": EventFragment;
    "TaxRateUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductLaunched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxRateUpdated"): EventFragment;
}

export class Marketplace extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketplaceInterface;

  functions: {
    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "RATE_DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStocks(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addStocks(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buy(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    launchNewProduct(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "launchNewProduct(string,string,string,string,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    launchNewProductWithMaxSupply(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "launchNewProductWithMaxSupply(string,string,string,string,uint256,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    products(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        profitRate: BigNumber;
        stock: BigNumber;
      }
    >;

    "products(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        profitRate: BigNumber;
        stock: BigNumber;
      }
    >;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverer(overrides?: CallOverrides): Promise<[string]>;

    "recoverer()"(overrides?: CallOverrides): Promise<[string]>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      product: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPrice(address,uint256)"(
      product: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfitRate(
      product: string,
      profitRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProfitRate(address,uint256)"(
      product: string,
      profitRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "taxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "RATE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  addStocks(
    product: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addStocks(address,uint256)"(
    product: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    product: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buy(address,uint256)"(
    product: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disable(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disable(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disablePermanently(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disablePermanently(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enable(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enable(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  launchNewProduct(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _description: string,
    profitRate: BigNumberish,
    price: BigNumberish,
    initialStock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "launchNewProduct(string,string,string,string,uint256,uint256,uint256)"(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _description: string,
    profitRate: BigNumberish,
    price: BigNumberish,
    initialStock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  launchNewProductWithMaxSupply(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _description: string,
    profitRate: BigNumberish,
    price: BigNumberish,
    initialStock: BigNumberish,
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "launchNewProductWithMaxSupply(string,string,string,string,uint256,uint256,uint256,uint256)"(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _description: string,
    profitRate: BigNumberish,
    price: BigNumberish,
    initialStock: BigNumberish,
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "nonRecoverable(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  permanentlyNonRecoverable(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "permanentlyNonRecoverable(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  products(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      profitRate: BigNumber;
      stock: BigNumber;
    }
  >;

  "products(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      profitRate: BigNumber;
      stock: BigNumber;
    }
  >;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverer(overrides?: CallOverrides): Promise<string>;

  "recoverer()"(overrides?: CallOverrides): Promise<string>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFactory(address)"(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    product: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPrice(address,uint256)"(
    product: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfitRate(
    product: string,
    profitRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProfitRate(address,uint256)"(
    product: string,
    profitRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoverer(
    _recoverer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecoverer(address)"(
    _recoverer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRate(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxRate(overrides?: CallOverrides): Promise<BigNumber>;

  "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "RATE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStocks(
      product: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStocks(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      product: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "buy(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    disable(_contract: string, overrides?: CallOverrides): Promise<void>;

    "disable(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disablePermanently(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enable(_contract: string, overrides?: CallOverrides): Promise<void>;

    "enable(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    launchNewProduct(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "launchNewProduct(string,string,string,string,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    launchNewProductWithMaxSupply(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "launchNewProductWithMaxSupply(string,string,string,string,uint256,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    products(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        profitRate: BigNumber;
        stock: BigNumber;
      }
    >;

    "products(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        profitRate: BigNumber;
        stock: BigNumber;
      }
    >;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverer(overrides?: CallOverrides): Promise<string>;

    "recoverer()"(overrides?: CallOverrides): Promise<string>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    "setFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      product: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPrice(address,uint256)"(
      product: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitRate(
      product: string,
      profitRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfitRate(address,uint256)"(
      product: string,
      profitRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecoverer(_recoverer: string, overrides?: CallOverrides): Promise<void>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    FactoryChanged(
      prevFactory: null,
      newFactory: null
    ): TypedEventFilter<
      [string, string],
      { prevFactory: string; newFactory: string }
    >;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;

    PriceUpdated(
      product: string | null,
      price: null
    ): TypedEventFilter<
      [string, BigNumber],
      { product: string; price: BigNumber }
    >;

    ProductLaunched(
      manufacturer: string | null,
      product: null
    ): TypedEventFilter<
      [string, string],
      { manufacturer: string; product: string }
    >;

    ProfitRateUpdated(
      product: string | null,
      profitRate: null
    ): TypedEventFilter<
      [string, BigNumber],
      { product: string; profitRate: BigNumber }
    >;

    Recovered(
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    Supply(
      product: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { product: string; amount: BigNumber }
    >;

    TaxRateUpdated(
      taxRate: null
    ): TypedEventFilter<[BigNumber], { taxRate: BigNumber }>;
  };

  estimateGas: {
    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "RATE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStocks(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addStocks(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buy(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    launchNewProduct(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "launchNewProduct(string,string,string,string,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    launchNewProductWithMaxSupply(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "launchNewProductWithMaxSupply(string,string,string,string,uint256,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    products(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "products(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverer(overrides?: CallOverrides): Promise<BigNumber>;

    "recoverer()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      product: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPrice(address,uint256)"(
      product: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfitRate(
      product: string,
      profitRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProfitRate(address,uint256)"(
      product: string,
      profitRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    RATE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RATE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStocks(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addStocks(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256)"(
      product: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchNewProduct(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "launchNewProduct(string,string,string,string,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    launchNewProductWithMaxSupply(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "launchNewProductWithMaxSupply(string,string,string,string,uint256,uint256,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _baseURI: string,
      _description: string,
      profitRate: BigNumberish,
      price: BigNumberish,
      initialStock: BigNumberish,
      maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    products(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "products(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recoverer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      product: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPrice(address,uint256)"(
      product: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfitRate(
      product: string,
      profitRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProfitRate(address,uint256)"(
      product: string,
      profitRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "taxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
