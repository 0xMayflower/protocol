/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface JobBoardInterface extends ethers.utils.Interface {
  functions: {
    "acceptableTokens(address)": FunctionFragment;
    "addAndExecuteBudget(uint256,address,uint256)": FunctionFragment;
    "addBudget(uint256,address,uint256)": FunctionFragment;
    "addCurrency(address)": FunctionFragment;
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "approveProject(uint256)": FunctionFragment;
    "approvedProjects(uint256)": FunctionFragment;
    "baseCurrency()": FunctionFragment;
    "claim(uint256,address,uint256,bytes32,bytes)": FunctionFragment;
    "claimed(bytes32)": FunctionFragment;
    "closeProject(uint256)": FunctionFragment;
    "commitToken()": FunctionFragment;
    "compensate(uint256,address,uint256)": FunctionFragment;
    "createProject(string)": FunctionFragment;
    "disapproveProject(uint256)": FunctionFragment;
    "dividendPool()": FunctionFragment;
    "executeBudget(uint256,uint256)": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "forceExecuteBudget(uint256,uint256)": FunctionFragment;
    "getTotalBudgets(uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "normalTaxRate()": FunctionFragment;
    "project()": FunctionFragment;
    "projectBudgets(uint256,uint256)": FunctionFragment;
    "projectFund(uint256)": FunctionFragment;
    "receiveGrant(address,uint256,bytes)": FunctionFragment;
    "removeCurrency(address)": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setTaxRate(uint256)": FunctionFragment;
    "setTaxRateForUndeclared(uint256)": FunctionFragment;
    "stableReserve()": FunctionFragment;
    "taxRateForUndeclared()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAndExecuteBudget",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBudget",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addCurrency", values: [string]): string;
  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedProjects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claimed", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "closeProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compensate",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disapproveProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeBudget",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceExecuteBudget",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBudgets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "normalTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "project", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectBudgets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveGrant",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRateForUndeclared",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxRateForUndeclared",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAndExecuteBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compensate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disapproveProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceExecuteBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBudgets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "normalTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "project", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectBudgets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxRateForUndeclared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxRateForUndeclared",
    data: BytesLike
  ): Result;

  events: {
    "Anarchized()": EventFragment;
    "BudgetAdded(uint256,uint256,address,uint256)": EventFragment;
    "BudgetExecuted(uint256,uint256)": EventFragment;
    "BudgetWithdrawn(uint256,uint256)": EventFragment;
    "Grant(uint256,uint256)": EventFragment;
    "ManagerUpdated(address,bool)": EventFragment;
    "NewGovernance(address,address)": EventFragment;
    "Payed(uint256,address,uint256)": EventFragment;
    "ProjectClosed(uint256)": EventFragment;
    "ProjectPosted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Grant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectPosted"): EventFragment;
}

export class JobBoard extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: JobBoardInterface;

  functions: {
    acceptableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "acceptableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addAndExecuteBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAndExecuteBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedProjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedProjects(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    baseCurrency(overrides?: CallOverrides): Promise<[string]>;

    "baseCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    claim(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(uint256,address,uint256,bytes32,bytes)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "claimed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitToken(overrides?: CallOverrides): Promise<[string]>;

    "commitToken()"(overrides?: CallOverrides): Promise<[string]>;

    compensate(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "compensate(uint256,address,uint256)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProject(
      URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createProject(string)"(
      URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disapproveProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disapproveProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dividendPool(overrides?: CallOverrides): Promise<[string]>;

    "dividendPool()"(overrides?: CallOverrides): Promise<[string]>;

    executeBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceExecuteBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceExecuteBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalBudgets(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalBudgets(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    normalTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    project(overrides?: CallOverrides): Promise<[string]>;

    "project()"(overrides?: CallOverrides): Promise<[string]>;

    projectBudgets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { amount: BigNumber; transferred: boolean }
    >;

    "projectBudgets(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { amount: BigNumber; transferred: boolean }
    >;

    projectFund(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "projectFund(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    receiveGrant(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "receiveGrant(address,uint256,bytes)"(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableReserve(overrides?: CallOverrides): Promise<[string]>;

    "stableReserve()"(overrides?: CallOverrides): Promise<[string]>;

    taxRateForUndeclared(overrides?: CallOverrides): Promise<[BigNumber]>;

    "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "acceptableTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addAndExecuteBudget(
    projId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAndExecuteBudget(uint256,address,uint256)"(
    projId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBudget(
    projId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBudget(uint256,address,uint256)"(
    projId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCurrency(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addCurrency(address)"(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  approveProject(
    projId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveProject(uint256)"(
    projId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedProjects(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvedProjects(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  baseCurrency(overrides?: CallOverrides): Promise<string>;

  "baseCurrency()"(overrides?: CallOverrides): Promise<string>;

  claim(
    projectId: BigNumberish,
    to: string,
    amount: BigNumberish,
    salt: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(uint256,address,uint256,bytes32,bytes)"(
    projectId: BigNumberish,
    to: string,
    amount: BigNumberish,
    salt: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "claimed(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeProject(
    projId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeProject(uint256)"(
    projId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitToken(overrides?: CallOverrides): Promise<string>;

  "commitToken()"(overrides?: CallOverrides): Promise<string>;

  compensate(
    projectId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "compensate(uint256,address,uint256)"(
    projectId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProject(
    URI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createProject(string)"(
    URI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disapproveProject(
    projId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disapproveProject(uint256)"(
    projId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dividendPool(overrides?: CallOverrides): Promise<string>;

  "dividendPool()"(overrides?: CallOverrides): Promise<string>;

  executeBudget(
    projId: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeBudget(uint256,uint256)"(
    projId: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  forceExecuteBudget(
    projId: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceExecuteBudget(uint256,uint256)"(
    projId: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalBudgets(
    projId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalBudgets(uint256)"(
    projId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  normalTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

  "normalTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  project(overrides?: CallOverrides): Promise<string>;

  "project()"(overrides?: CallOverrides): Promise<string>;

  projectBudgets(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { amount: BigNumber; transferred: boolean }
  >;

  "projectBudgets(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { amount: BigNumber; transferred: boolean }
  >;

  projectFund(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "projectFund(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  receiveGrant(
    currency: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "receiveGrant(address,uint256,bytes)"(
    currency: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCurrency(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeCurrency(address)"(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRate(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRateForUndeclared(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRateForUndeclared(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableReserve(overrides?: CallOverrides): Promise<string>;

  "stableReserve()"(overrides?: CallOverrides): Promise<string>;

  taxRateForUndeclared(overrides?: CallOverrides): Promise<BigNumber>;

  "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptableTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "acceptableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addAndExecuteBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAndExecuteBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addCurrency(currency: string, overrides?: CallOverrides): Promise<void>;

    "addCurrency(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveProject(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveProject(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedProjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvedProjects(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseCurrency(overrides?: CallOverrides): Promise<string>;

    "baseCurrency()"(overrides?: CallOverrides): Promise<string>;

    claim(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(uint256,address,uint256,bytes32,bytes)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "claimed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeProject(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeProject(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitToken(overrides?: CallOverrides): Promise<string>;

    "commitToken()"(overrides?: CallOverrides): Promise<string>;

    compensate(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "compensate(uint256,address,uint256)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createProject(URI: string, overrides?: CallOverrides): Promise<void>;

    "createProject(string)"(
      URI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disapproveProject(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "disapproveProject(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dividendPool(overrides?: CallOverrides): Promise<string>;

    "dividendPool()"(overrides?: CallOverrides): Promise<string>;

    executeBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceExecuteBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceExecuteBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalBudgets(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalBudgets(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    normalTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    project(overrides?: CallOverrides): Promise<string>;

    "project()"(overrides?: CallOverrides): Promise<string>;

    projectBudgets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { amount: BigNumber; transferred: boolean }
    >;

    "projectBudgets(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { amount: BigNumber; transferred: boolean }
    >;

    projectFund(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectFund(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveGrant(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "receiveGrant(address,uint256,bytes)"(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeCurrency(currency: string, overrides?: CallOverrides): Promise<void>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableReserve(overrides?: CallOverrides): Promise<string>;

    "stableReserve()"(overrides?: CallOverrides): Promise<string>;

    taxRateForUndeclared(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    BudgetAdded(
      projId: BigNumberish | null,
      index: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      { projId: BigNumber; index: BigNumber; token: string; amount: BigNumber }
    >;

    BudgetExecuted(
      projId: null,
      index: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { projId: BigNumber; index: BigNumber }
    >;

    BudgetWithdrawn(
      projId: null,
      index: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { projId: BigNumber; index: BigNumber }
    >;

    Grant(
      projId: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { projId: BigNumber; amount: BigNumber }
    >;

    ManagerUpdated(
      manager: string | null,
      active: null
    ): TypedEventFilter<
      [string, boolean],
      { manager: string; active: boolean }
    >;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;

    Payed(
      projId: null,
      to: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { projId: BigNumber; to: string; amount: BigNumber }
    >;

    ProjectClosed(
      projId: null
    ): TypedEventFilter<[BigNumber], { projId: BigNumber }>;

    ProjectPosted(
      projId: null
    ): TypedEventFilter<[BigNumber], { projId: BigNumber }>;
  };

  estimateGas: {
    acceptableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "acceptableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAndExecuteBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAndExecuteBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedProjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedProjects(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "baseCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(uint256,address,uint256,bytes32,bytes)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitToken(overrides?: CallOverrides): Promise<BigNumber>;

    "commitToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    compensate(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "compensate(uint256,address,uint256)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProject(
      URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createProject(string)"(
      URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disapproveProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disapproveProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dividendPool(overrides?: CallOverrides): Promise<BigNumber>;

    "dividendPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceExecuteBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceExecuteBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalBudgets(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalBudgets(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    normalTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    project(overrides?: CallOverrides): Promise<BigNumber>;

    "project()"(overrides?: CallOverrides): Promise<BigNumber>;

    projectBudgets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectBudgets(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectFund(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectFund(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveGrant(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "receiveGrant(address,uint256,bytes)"(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "stableReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxRateForUndeclared(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptableTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptableTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAndExecuteBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAndExecuteBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBudget(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBudget(uint256,address,uint256)"(
      projId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedProjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedProjects(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseCurrency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(uint256,address,uint256,bytes32,bytes)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      salt: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commitToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compensate(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "compensate(uint256,address,uint256)"(
      projectId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProject(
      URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createProject(string)"(
      URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disapproveProject(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disapproveProject(uint256)"(
      projId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dividendPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dividendPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceExecuteBudget(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceExecuteBudget(uint256,uint256)"(
      projId: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalBudgets(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBudgets(uint256)"(
      projId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    normalTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    project(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "project()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectBudgets(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectBudgets(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectFund(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectFund(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveGrant(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "receiveGrant(address,uint256,bytes)"(
      currency: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stableReserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxRateForUndeclared(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "taxRateForUndeclared()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
