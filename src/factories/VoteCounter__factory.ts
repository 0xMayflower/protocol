/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { VoteCounter } from "../VoteCounter";

export class VoteCounter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _veToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VoteCounter> {
    return super.deploy(_veToken, overrides || {}) as Promise<VoteCounter>;
  }
  getDeployTransaction(
    _veToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_veToken, overrides || {});
  }
  attach(address: string): VoteCounter {
    return super.attach(address) as VoteCounter;
  }
  connect(signer: Signer): VoteCounter__factory {
    return super.connect(signer) as VoteCounter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VoteCounter {
    return new Contract(address, _abi, signerOrProvider) as VoteCounter;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_veToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getTotalVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "veLockId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "veLockId",
        type: "uint256",
      },
    ],
    name: "voterOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "votingRights",
    outputs: [
      {
        internalType: "uint256[]",
        name: "rights",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105ca3803806105ca8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b038316908117909155604080516314f57a4b60e01b815290516314f57a4b91600480820192602092909190829003018186803b15801561008957600080fd5b505afa15801561009d573d6000803e3d6000fd5b505050506040513d60208110156100b357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055506104e4806100e66000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fb05fca1461005157806391f366331461008a5780639a0e7d66146100bf578063a8fef100146100c7575b600080fd5b61006e6004803603602081101561006757600080fd5b503561013d565b604080516001600160a01b039092168252519081900360200190f35b6100ad600480360360408110156100a057600080fd5b50803590602001356101d5565b60408051918252519081900360200190f35b6100ad610274565b6100ed600480360360208110156100dd57600080fd5b50356001600160a01b0316610303565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610129578181015183820152602001610111565b505050509050019250505060405180910390f35b60008054604080517f4864025e0000000000000000000000000000000000000000000000000000000081526004810185905290516001600160a01b0390921691634864025e91602480820192602092909190829003018186803b1580156101a357600080fd5b505afa1580156101b7573d6000803e3d6000fd5b505050506040513d60208110156101cd57600080fd5b505192915050565b600154604080517f642cf649000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516000926001600160a01b03169163642cf649916044808301926020929190829003018186803b15801561024157600080fd5b505afa158015610255573d6000803e3d6000fd5b505050506040513d602081101561026b57600080fd5b50519392505050565b600154604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156102d257600080fd5b505afa1580156102e6573d6000803e3d6000fd5b505050506040513d60208110156102fc57600080fd5b5051905090565b60008054604080517f4bb5c4140000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151606094939290921691634bb5c41491602480820192602092909190829003018186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d602081101561039957600080fd5b505190508067ffffffffffffffff811180156103b457600080fd5b506040519080825280602002602001820160405280156103de578160200160208202803683370190505b50915060005b82518110156104a757600054604080517f5fb6073a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820185905291519190921691635fb6073a916044808301926020929190829003018186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d602081101561048457600080fd5b5051835184908390811061049457fe5b60209081029190910101526001016103e4565b505091905056fea2646970667358221220acb32b4f5325031206d5305bd25903015f226296225cd3caeeb82a98f572ec8f64736f6c63430007060033";
