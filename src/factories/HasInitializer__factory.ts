/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { HasInitializer } from "../HasInitializer";

export class HasInitializer__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HasInitializer> {
    return super.deploy(overrides || {}) as Promise<HasInitializer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HasInitializer {
    return super.attach(address) as HasInitializer;
  }
  connect(signer: Signer): HasInitializer__factory {
    return super.connect(signer) as HasInitializer__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HasInitializer {
    return new Contract(address, _abi, signerOrProvider) as HasInitializer;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b03191633179055603f80602f6000396000f3fe6080604052600080fdfea264697066735822122043e5515fa1ea2698e08ad5a46bdfdcbff17772f1da87e2d9938382660f81b21764736f6c63430007060033";
