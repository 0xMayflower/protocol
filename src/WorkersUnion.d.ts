/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WorkersUnionInterface extends ethers.utils.Interface {
  functions: {
    "NO_DEPENDENCY()": FunctionFragment;
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "changeMemorandom(uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "execute(address,uint256,bytes,bytes32,bytes32)": FunctionFragment;
    "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "getVotesAt(address,uint256)": FunctionFragment;
    "getVotesFor(address,bytes32)": FunctionFragment;
    "getVotingStatus(bytes32)": FunctionFragment;
    "gov()": FunctionFragment;
    "launch()": FunctionFragment;
    "memorandom()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "proposeBatchTx(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "proposeTx(address,uint256,bytes,bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "schedule(address,uint256,bytes,bytes32,bytes32)": FunctionFragment;
    "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32)": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "vote(bytes32,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NO_DEPENDENCY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeMemorandom",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [string[], BigNumberish[], BytesLike[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesFor",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "launch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "memorandom",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeBatchTx",
    values: [
      string[],
      BigNumberish[],
      BytesLike[],
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTx",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleBatch",
    values: [string[], BigNumberish[], BytesLike[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "NO_DEPENDENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMemorandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotesAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memorandom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeBatchTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposeTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "Anarchized()": EventFragment;
    "BatchTxProposed(bytes32,address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)": EventFragment;
    "NewGovernance(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TxProposed(bytes32,address,uint256,bytes,bytes32,bytes32,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Vote(bytes32,address,bool)": EventFragment;
    "VoteUpdated(bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchTxProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteUpdated"): EventFragment;
}

export class WorkersUnion extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorkersUnionInterface;

  functions: {
    NO_DEPENDENCY(overrides?: CallOverrides): Promise<[string]>;

    "NO_DEPENDENCY()"(overrides?: CallOverrides): Promise<[string]>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeMemorandom(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeMemorandom(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotesAt(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getVotesAt(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotesFor(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getVotesFor(address,bytes32)"(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getVotingStatus(bytes32)"(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    launch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "launch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    memorandom(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        minimumPending: BigNumber;
        maximumPending: BigNumber;
        minimumVotingPeriod: BigNumber;
        maximumVotingPeriod: BigNumber;
        minimumVotesForProposing: BigNumber;
        minimumVotes: BigNumber;
        voteCounter: string;
      }
    >;

    "memorandom()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        minimumPending: BigNumber;
        maximumPending: BigNumber;
        minimumVotingPeriod: BigNumber;
        maximumVotingPeriod: BigNumber;
        minimumVotesForProposing: BigNumber;
        minimumVotes: BigNumber;
        voteCounter: string;
      }
    >;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        start: BigNumber;
        end: BigNumber;
        totalForVotes: BigNumber;
        totalAgainstVotes: BigNumber;
      }
    >;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        start: BigNumber;
        end: BigNumber;
        totalForVotes: BigNumber;
        totalAgainstVotes: BigNumber;
      }
    >;

    proposeBatchTx(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeBatchTx(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeTx(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeTx(address,uint256,bytes,bytes32,bytes32,uint256,uint256)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    schedule(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "schedule(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scheduleBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "vote(bytes32,bool)"(
      txHash: BytesLike,
      agree: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "vote(bytes32,uint256[],bool)"(
      txHash: BytesLike,
      rightIds: BigNumberish[],
      agree: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NO_DEPENDENCY(overrides?: CallOverrides): Promise<string>;

  "NO_DEPENDENCY()"(overrides?: CallOverrides): Promise<string>;

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  changeMemorandom(
    minimumPendingPeriod: BigNumberish,
    maximumPendingPeriod: BigNumberish,
    minimumVotingPeriod: BigNumberish,
    maximumVotingPeriod: BigNumberish,
    minimumVotesForProposing: BigNumberish,
    minimumVotes: BigNumberish,
    voteCounter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeMemorandom(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
    minimumPendingPeriod: BigNumberish,
    maximumPendingPeriod: BigNumberish,
    minimumVotingPeriod: BigNumberish,
    maximumVotingPeriod: BigNumberish,
    minimumVotesForProposing: BigNumberish,
    minimumVotes: BigNumberish,
    voteCounter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(address,uint256,bytes,bytes32,bytes32)"(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeBatch(
    target: string[],
    value: BigNumberish[],
    data: BytesLike[],
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
    target: string[],
    value: BigNumberish[],
    data: BytesLike[],
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVotesAt(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVotesAt(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotesFor(
    account: string,
    txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVotesFor(address,bytes32)"(
    account: string,
    txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingStatus(
    txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "getVotingStatus(bytes32)"(
    txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  launch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "launch()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  memorandom(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      minimumPending: BigNumber;
      maximumPending: BigNumber;
      minimumVotingPeriod: BigNumber;
      maximumVotingPeriod: BigNumber;
      minimumVotesForProposing: BigNumber;
      minimumVotes: BigNumber;
      voteCounter: string;
    }
  >;

  "memorandom()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      minimumPending: BigNumber;
      maximumPending: BigNumber;
      minimumVotingPeriod: BigNumber;
      maximumVotingPeriod: BigNumber;
      minimumVotesForProposing: BigNumber;
      minimumVotes: BigNumber;
      voteCounter: string;
    }
  >;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proposals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      proposer: string;
      start: BigNumber;
      end: BigNumber;
      totalForVotes: BigNumber;
      totalAgainstVotes: BigNumber;
    }
  >;

  "proposals(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      proposer: string;
      start: BigNumber;
      end: BigNumber;
      totalForVotes: BigNumber;
      totalAgainstVotes: BigNumber;
    }
  >;

  proposeBatchTx(
    target: string[],
    value: BigNumberish[],
    data: BytesLike[],
    predecessor: BytesLike,
    salt: BytesLike,
    startsIn: BigNumberish,
    votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeBatchTx(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)"(
    target: string[],
    value: BigNumberish[],
    data: BytesLike[],
    predecessor: BytesLike,
    salt: BytesLike,
    startsIn: BigNumberish,
    votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeTx(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    predecessor: BytesLike,
    salt: BytesLike,
    startsIn: BigNumberish,
    votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeTx(address,uint256,bytes,bytes32,bytes32,uint256,uint256)"(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    predecessor: BytesLike,
    salt: BytesLike,
    startsIn: BigNumberish,
    votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  schedule(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "schedule(address,uint256,bytes,bytes32,bytes32)"(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scheduleBatch(
    target: string[],
    value: BigNumberish[],
    data: BytesLike[],
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
    target: string[],
    value: BigNumberish[],
    data: BytesLike[],
    predecessor: BytesLike,
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "vote(bytes32,bool)"(
    txHash: BytesLike,
    agree: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "vote(bytes32,uint256[],bool)"(
    txHash: BytesLike,
    rightIds: BigNumberish[],
    agree: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NO_DEPENDENCY(overrides?: CallOverrides): Promise<string>;

    "NO_DEPENDENCY()"(overrides?: CallOverrides): Promise<string>;

    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeMemorandom(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeMemorandom(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "execute(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVotesAt(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotesAt(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesFor(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotesFor(address,bytes32)"(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "getVotingStatus(bytes32)"(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    launch(overrides?: CallOverrides): Promise<void>;

    "launch()"(overrides?: CallOverrides): Promise<void>;

    memorandom(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        minimumPending: BigNumber;
        maximumPending: BigNumber;
        minimumVotingPeriod: BigNumber;
        maximumVotingPeriod: BigNumber;
        minimumVotesForProposing: BigNumber;
        minimumVotes: BigNumber;
        voteCounter: string;
      }
    >;

    "memorandom()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        minimumPending: BigNumber;
        maximumPending: BigNumber;
        minimumVotingPeriod: BigNumber;
        maximumVotingPeriod: BigNumber;
        minimumVotesForProposing: BigNumber;
        minimumVotes: BigNumber;
        voteCounter: string;
      }
    >;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        start: BigNumber;
        end: BigNumber;
        totalForVotes: BigNumber;
        totalAgainstVotes: BigNumber;
      }
    >;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        proposer: string;
        start: BigNumber;
        end: BigNumber;
        totalForVotes: BigNumber;
        totalAgainstVotes: BigNumber;
      }
    >;

    proposeBatchTx(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeBatchTx(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeTx(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeTx(address,uint256,bytes,bytes32,bytes32,uint256,uint256)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    schedule(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "schedule(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    scheduleBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(bytes32,bool)"(
      txHash: BytesLike,
      agree: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(bytes32,uint256[],bool)"(
      txHash: BytesLike,
      rightIds: BigNumberish[],
      agree: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    BatchTxProposed(
      txHash: BytesLike | null,
      target: null,
      value: null,
      data: null,
      predecessor: null,
      salt: null,
      start: null,
      end: null
    ): TypedEventFilter<
      [
        string,
        string[],
        BigNumber[],
        string[],
        string,
        string,
        BigNumber,
        BigNumber
      ],
      {
        txHash: string;
        target: string[];
        value: BigNumber[];
        data: string[];
        predecessor: string;
        salt: string;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    TxProposed(
      txHash: BytesLike | null,
      target: null,
      value: null,
      data: null,
      predecessor: null,
      salt: null,
      start: null,
      end: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string, BigNumber, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        data: string;
        predecessor: string;
        salt: string;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    Vote(
      txHash: null,
      voter: null,
      forVote: null
    ): TypedEventFilter<
      [string, string, boolean],
      { txHash: string; voter: string; forVote: boolean }
    >;

    VoteUpdated(
      txHash: null,
      forVotes: null,
      againsVotes: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { txHash: string; forVotes: BigNumber; againsVotes: BigNumber }
    >;
  };

  estimateGas: {
    NO_DEPENDENCY(overrides?: CallOverrides): Promise<BigNumber>;

    "NO_DEPENDENCY()"(overrides?: CallOverrides): Promise<BigNumber>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeMemorandom(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeMemorandom(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVotesAt(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotesAt(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesFor(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotesFor(address,bytes32)"(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVotingStatus(bytes32)"(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    launch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "launch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    memorandom(overrides?: CallOverrides): Promise<BigNumber>;

    "memorandom()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeBatchTx(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeBatchTx(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeTx(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeTx(address,uint256,bytes,bytes32,bytes32,uint256,uint256)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    schedule(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "schedule(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scheduleBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "vote(bytes32,bool)"(
      txHash: BytesLike,
      agree: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "vote(bytes32,uint256[],bool)"(
      txHash: BytesLike,
      rightIds: BigNumberish[],
      agree: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NO_DEPENDENCY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NO_DEPENDENCY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMemorandom(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeMemorandom(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      minimumPendingPeriod: BigNumberish,
      maximumPendingPeriod: BigNumberish,
      minimumVotingPeriod: BigNumberish,
      maximumVotingPeriod: BigNumberish,
      minimumVotesForProposing: BigNumberish,
      minimumVotes: BigNumberish,
      voteCounter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesAt(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotesAt(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesFor(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotesFor(address,bytes32)"(
      account: string,
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVotingStatus(bytes32)"(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "launch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    memorandom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "memorandom()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeBatchTx(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeBatchTx(address[],uint256[],bytes[],bytes32,bytes32,uint256,uint256)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeTx(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeTx(address,uint256,bytes,bytes32,bytes32,uint256,uint256)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      startsIn: BigNumberish,
      votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    schedule(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "schedule(address,uint256,bytes,bytes32,bytes32)"(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scheduleBatch(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32)"(
      target: string[],
      value: BigNumberish[],
      data: BytesLike[],
      predecessor: BytesLike,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "vote(bytes32,bool)"(
      txHash: BytesLike,
      agree: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "vote(bytes32,uint256[],bool)"(
      txHash: BytesLike,
      rightIds: BigNumberish[],
      agree: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
