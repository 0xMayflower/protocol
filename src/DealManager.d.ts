/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DealManagerInterface extends ethers.utils.Interface {
  functions: {
    "accepted(address)": FunctionFragment;
    "addBudget(bytes32,address,uint256)": FunctionFragment;
    "addCurrency(address)": FunctionFragment;
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "approveBudget(bytes32,uint256,bytes)": FunctionFragment;
    "breakDeal(bytes32)": FunctionFragment;
    "createDeal(string)": FunctionFragment;
    "createDealWithBudget(string,address,uint256)": FunctionFragment;
    "deals(bytes32)": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "forceApproveBudget(bytes32,uint256)": FunctionFragment;
    "funds(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "hammerOut(bytes32)": FunctionFragment;
    "managers(address)": FunctionFragment;
    "normalTaxRate()": FunctionFragment;
    "oneInch()": FunctionFragment;
    "removeCurrency(address)": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setExchange(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setManager(address,bool)": FunctionFragment;
    "setTaxRate(uint256)": FunctionFragment;
    "setTaxRateForUndeclared(uint256)": FunctionFragment;
    "taxRateForUndeclared()": FunctionFragment;
    "taxToVisionFarm(address,uint256)": FunctionFragment;
    "taxations(address)": FunctionFragment;
    "withdrawDeal(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accepted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBudget",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addCurrency", values: [string]): string;
  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveBudget",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "breakDeal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "createDeal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createDealWithBudget",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deals", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceApproveBudget",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "funds", values: [string]): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hammerOut",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "managers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "normalTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oneInch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setExchange", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRateForUndeclared",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxRateForUndeclared",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxToVisionFarm",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "taxations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawDeal",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "accepted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breakDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDealWithBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceApproveBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hammerOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "normalTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oneInch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTaxRateForUndeclared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxRateForUndeclared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxToVisionFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeal",
    data: BytesLike
  ): Result;

  events: {
    "Anarchized()": EventFragment;
    "BudgetAdded(bytes32,uint256,address,uint256)": EventFragment;
    "BudgetApproved(bytes32,uint256)": EventFragment;
    "BudgetWithdrawn(bytes32,uint256)": EventFragment;
    "DealCreated(bytes32,address,string)": EventFragment;
    "DealWithdrawn(bytes32)": EventFragment;
    "ManagerUpdated(address,bool)": EventFragment;
    "NewGovernance(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
}

export class DealManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DealManagerInterface;

  functions: {
    accepted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "accepted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addBudget(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBudget(bytes32,address,uint256)"(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveBudget(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveBudget(bytes32,uint256,bytes)"(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breakDeal(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "breakDeal(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDeal(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createDeal(string)"(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDealWithBudget(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createDealWithBudget(string,address,uint256)"(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { contractor: string; hammeredOut: boolean }
    >;

    "deals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { contractor: string; hammeredOut: boolean }
    >;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceApproveBudget(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceApproveBudget(bytes32,uint256)"(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    funds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "funds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    hammerOut(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hammerOut(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    normalTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oneInch(overrides?: CallOverrides): Promise<[string]>;

    "oneInch()"(overrides?: CallOverrides): Promise<[string]>;

    removeCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchange(
      _oneInch: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExchange(address)"(
      _oneInch: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      manager: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setManager(address,bool)"(
      manager: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxRateForUndeclared(overrides?: CallOverrides): Promise<[BigNumber]>;

    "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxToVisionFarm(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "taxToVisionFarm(address,uint256)"(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxations(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "taxations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawDeal(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawDeal(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accepted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "accepted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addBudget(
    projId: BytesLike,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBudget(bytes32,address,uint256)"(
    projId: BytesLike,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCurrency(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addCurrency(address)"(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  approveBudget(
    projId: BytesLike,
    index: BigNumberish,
    swapData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveBudget(bytes32,uint256,bytes)"(
    projId: BytesLike,
    index: BigNumberish,
    swapData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breakDeal(
    projId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "breakDeal(bytes32)"(
    projId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDeal(
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createDeal(string)"(
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDealWithBudget(
    description: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createDealWithBudget(string,address,uint256)"(
    description: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { contractor: string; hammeredOut: boolean }>;

  "deals(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { contractor: string; hammeredOut: boolean }>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  forceApproveBudget(
    projId: BytesLike,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceApproveBudget(bytes32,uint256)"(
    projId: BytesLike,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  funds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "funds(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  hammerOut(
    projId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hammerOut(bytes32)"(
    projId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "managers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  normalTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

  "normalTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  oneInch(overrides?: CallOverrides): Promise<string>;

  "oneInch()"(overrides?: CallOverrides): Promise<string>;

  removeCurrency(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeCurrency(address)"(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchange(
    _oneInch: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExchange(address)"(
    _oneInch: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    manager: string,
    active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setManager(address,bool)"(
    manager: string,
    active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRate(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRateForUndeclared(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRateForUndeclared(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxRateForUndeclared(overrides?: CallOverrides): Promise<BigNumber>;

  "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<BigNumber>;

  taxToVisionFarm(
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "taxToVisionFarm(address,uint256)"(
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "taxations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawDeal(
    projId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawDeal(bytes32)"(
    projId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accepted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "accepted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addBudget(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBudget(bytes32,address,uint256)"(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addCurrency(currency: string, overrides?: CallOverrides): Promise<void>;

    "addCurrency(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveBudget(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveBudget(bytes32,uint256,bytes)"(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    breakDeal(projId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "breakDeal(bytes32)"(
      projId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createDeal(description: string, overrides?: CallOverrides): Promise<string>;

    "createDeal(string)"(
      description: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createDealWithBudget(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createDealWithBudget(string,address,uint256)"(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { contractor: string; hammeredOut: boolean }
    >;

    "deals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { contractor: string; hammeredOut: boolean }
    >;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceApproveBudget(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceApproveBudget(bytes32,uint256)"(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    funds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "funds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    hammerOut(projId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "hammerOut(bytes32)"(
      projId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    managers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    normalTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    oneInch(overrides?: CallOverrides): Promise<string>;

    "oneInch()"(overrides?: CallOverrides): Promise<string>;

    removeCurrency(currency: string, overrides?: CallOverrides): Promise<void>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchange(_oneInch: string, overrides?: CallOverrides): Promise<void>;

    "setExchange(address)"(
      _oneInch: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      manager: string,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setManager(address,bool)"(
      manager: string,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxRateForUndeclared(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxToVisionFarm(
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "taxToVisionFarm(address,uint256)"(
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "taxations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDeal(projId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "withdrawDeal(bytes32)"(
      projId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    BudgetAdded(
      projId: BytesLike | null,
      index: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { projId: string; index: BigNumber; token: string; amount: BigNumber }
    >;

    BudgetApproved(
      projId: null,
      index: null
    ): TypedEventFilter<
      [string, BigNumber],
      { projId: string; index: BigNumber }
    >;

    BudgetWithdrawn(
      projId: null,
      index: null
    ): TypedEventFilter<
      [string, BigNumber],
      { projId: string; index: BigNumber }
    >;

    DealCreated(
      projId: null,
      contractor: null,
      description: null
    ): TypedEventFilter<
      [string, string, string],
      { projId: string; contractor: string; description: string }
    >;

    DealWithdrawn(projId: null): TypedEventFilter<[string], { projId: string }>;

    ManagerUpdated(
      manager: string | null,
      active: null
    ): TypedEventFilter<
      [string, boolean],
      { manager: string; active: boolean }
    >;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;
  };

  estimateGas: {
    accepted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "accepted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBudget(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBudget(bytes32,address,uint256)"(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveBudget(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveBudget(bytes32,uint256,bytes)"(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breakDeal(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "breakDeal(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDeal(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createDeal(string)"(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDealWithBudget(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createDealWithBudget(string,address,uint256)"(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "deals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceApproveBudget(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceApproveBudget(bytes32,uint256)"(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    funds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "funds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    hammerOut(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hammerOut(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    normalTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    oneInch(overrides?: CallOverrides): Promise<BigNumber>;

    "oneInch()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchange(
      _oneInch: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExchange(address)"(
      _oneInch: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      manager: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setManager(address,bool)"(
      manager: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxRateForUndeclared(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRateForUndeclared()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxToVisionFarm(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "taxToVisionFarm(address,uint256)"(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "taxations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDeal(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawDeal(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accepted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accepted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBudget(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBudget(bytes32,address,uint256)"(
      projId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveBudget(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveBudget(bytes32,uint256,bytes)"(
      projId: BytesLike,
      index: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breakDeal(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "breakDeal(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDeal(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createDeal(string)"(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDealWithBudget(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createDealWithBudget(string,address,uint256)"(
      description: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceApproveBudget(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceApproveBudget(bytes32,uint256)"(
      projId: BytesLike,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    funds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "funds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hammerOut(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hammerOut(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    normalTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "normalTaxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneInch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oneInch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCurrency(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeCurrency(address)"(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchange(
      _oneInch: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExchange(address)"(
      _oneInch: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      manager: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setManager(address,bool)"(
      manager: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRateForUndeclared(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRateForUndeclared(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxRateForUndeclared(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "taxRateForUndeclared()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxToVisionFarm(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "taxToVisionFarm(address,uint256)"(
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "taxations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawDeal(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawDeal(bytes32)"(
      projId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
