/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenEmitterInterface extends ethers.utils.Interface {
  functions: {
    "DENOMINATOR()": FunctionFragment;
    "FOUNDER_SHARE_DENOMINATOR()": FunctionFragment;
    "INITIAL_EMISSION()": FunctionFragment;
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "distribute()": FunctionFragment;
    "emission()": FunctionFragment;
    "emissionCutRate()": FunctionFragment;
    "emissionPeriod()": FunctionFragment;
    "emissionStarted()": FunctionFragment;
    "emissionWeekNum()": FunctionFragment;
    "emissionWeight()": FunctionFragment;
    "factories(bytes4)": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "founderPool()": FunctionFragment;
    "getNumberOfPools()": FunctionFragment;
    "getPoolWeight(uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "minEmissionRatePerWeek()": FunctionFragment;
    "newPool(bytes4,address)": FunctionFragment;
    "poolTypes(address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "protocolPool()": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setEmission(address[],uint256[],uint256,uint256)": FunctionFragment;
    "setEmissionCutRate(uint256)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMinimumRate(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "start()": FunctionFragment;
    "token()": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FOUNDER_SHARE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_EMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "emission", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emissionCutRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionWeekNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factories",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "founderPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minEmissionRatePerWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newPool",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "poolTypes", values: [string]): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "protocolPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmission",
    values: [string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionCutRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FOUNDER_SHARE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_EMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emission", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emissionCutRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionWeekNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minEmissionRatePerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionCutRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "Anarchized()": EventFragment;
    "EmissionCutRateUpdated(uint256)": EventFragment;
    "EmissionRateUpdated(uint256)": EventFragment;
    "EmissionWeightUpdated(uint256)": EventFragment;
    "NewGovernance(address,address)": EventFragment;
    "NewMiningPool(bytes4,address,address)": EventFragment;
    "Start()": EventFragment;
    "TokenEmission(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmissionCutRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmissionRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmissionWeightUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMiningPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenEmission"): EventFragment;
}

export class TokenEmitter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenEmitterInterface;

  functions: {
    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FOUNDER_SHARE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FOUNDER_SHARE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    INITIAL_EMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "INITIAL_EMISSION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emission(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emission()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emissionCutRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emissionCutRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emissionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emissionPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emissionStarted(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emissionStarted()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emissionWeekNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emissionWeekNum()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emissionWeight(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        treasury: BigNumber;
        caller: BigNumber;
        protocol: BigNumber;
        dev: BigNumber;
        sum: BigNumber;
      }
    >;

    "emissionWeight()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        treasury: BigNumber;
        caller: BigNumber;
        protocol: BigNumber;
        dev: BigNumber;
        sum: BigNumber;
      }
    >;

    factories(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "factories(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    founderPool(overrides?: CallOverrides): Promise<[string]>;

    "founderPool()"(overrides?: CallOverrides): Promise<[string]>;

    getNumberOfPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumberOfPools()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolWeight(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPoolWeight(uint256)"(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    "initialize(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,address,address)"(
      _initialEmission: BigNumberish,
      _minEmissionRatePerWeek: BigNumberish,
      _emissionCutRate: BigNumberish,
      _founderShare: BigNumberish,
      _founderPool: string,
      _treasury: string,
      _gov: string,
      _token: string,
      _protocolPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minEmissionRatePerWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minEmissionRatePerWeek()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    newPool(
      sig: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newPool(bytes4,address)"(
      sig: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolTypes(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "poolTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolPool(overrides?: CallOverrides): Promise<[string]>;

    "protocolPool()"(overrides?: CallOverrides): Promise<[string]>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmission(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEmission(address[],uint256[],uint256,uint256)"(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmissionCutRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEmissionCutRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinimumRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  FOUNDER_SHARE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "FOUNDER_SHARE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  "INITIAL_EMISSION()"(overrides?: CallOverrides): Promise<BigNumber>;

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emission(overrides?: CallOverrides): Promise<BigNumber>;

  "emission()"(overrides?: CallOverrides): Promise<BigNumber>;

  emissionCutRate(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionCutRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  emissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  emissionStarted(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

  emissionWeekNum(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionWeekNum()"(overrides?: CallOverrides): Promise<BigNumber>;

  emissionWeight(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      treasury: BigNumber;
      caller: BigNumber;
      protocol: BigNumber;
      dev: BigNumber;
      sum: BigNumber;
    }
  >;

  "emissionWeight()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      treasury: BigNumber;
      caller: BigNumber;
      protocol: BigNumber;
      dev: BigNumber;
      sum: BigNumber;
    }
  >;

  factories(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "factories(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  founderPool(overrides?: CallOverrides): Promise<string>;

  "founderPool()"(overrides?: CallOverrides): Promise<string>;

  getNumberOfPools(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolWeight(
    poolIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPoolWeight(uint256)"(
    poolIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  "initialize(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,uint256,uint256,address,address,address,address,address)"(
    _initialEmission: BigNumberish,
    _minEmissionRatePerWeek: BigNumberish,
    _emissionCutRate: BigNumberish,
    _founderShare: BigNumberish,
    _founderPool: string,
    _treasury: string,
    _gov: string,
    _token: string,
    _protocolPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minEmissionRatePerWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "minEmissionRatePerWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  newPool(
    sig: BytesLike,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newPool(bytes4,address)"(
    sig: BytesLike,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolTypes(arg0: string, overrides?: CallOverrides): Promise<string>;

  "poolTypes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolPool(overrides?: CallOverrides): Promise<string>;

  "protocolPool()"(overrides?: CallOverrides): Promise<string>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmission(
    _miningPools: string[],
    _weights: BigNumberish[],
    _treasury: BigNumberish,
    _caller: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEmission(address[],uint256[],uint256,uint256)"(
    _miningPools: string[],
    _weights: BigNumberish[],
    _treasury: BigNumberish,
    _caller: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmissionCutRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEmissionCutRate(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFactory(address)"(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinimumRate(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "start()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    FOUNDER_SHARE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FOUNDER_SHARE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIAL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_EMISSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: CallOverrides): Promise<void>;

    "distribute()"(overrides?: CallOverrides): Promise<void>;

    emission(overrides?: CallOverrides): Promise<BigNumber>;

    "emission()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionCutRate(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionCutRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionWeekNum(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionWeekNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionWeight(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        treasury: BigNumber;
        caller: BigNumber;
        protocol: BigNumber;
        dev: BigNumber;
        sum: BigNumber;
      }
    >;

    "emissionWeight()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        treasury: BigNumber;
        caller: BigNumber;
        protocol: BigNumber;
        dev: BigNumber;
        sum: BigNumber;
      }
    >;

    factories(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "factories(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    founderPool(overrides?: CallOverrides): Promise<string>;

    "founderPool()"(overrides?: CallOverrides): Promise<string>;

    getNumberOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolWeight(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolWeight(uint256)"(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    "initialize(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,address,address)"(
      _initialEmission: BigNumberish,
      _minEmissionRatePerWeek: BigNumberish,
      _emissionCutRate: BigNumberish,
      _founderShare: BigNumberish,
      _founderPool: string,
      _treasury: string,
      _gov: string,
      _token: string,
      _protocolPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minEmissionRatePerWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "minEmissionRatePerWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    newPool(
      sig: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "newPool(bytes4,address)"(
      sig: BytesLike,
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    poolTypes(arg0: string, overrides?: CallOverrides): Promise<string>;

    "poolTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolPool(overrides?: CallOverrides): Promise<string>;

    "protocolPool()"(overrides?: CallOverrides): Promise<string>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmission(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmission(address[],uint256[],uint256,uint256)"(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmissionCutRate(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmissionCutRate(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    "setFactory(address)"(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumRate(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumRate(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    "start()"(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    EmissionCutRateUpdated(
      rate: null
    ): TypedEventFilter<[BigNumber], { rate: BigNumber }>;

    EmissionRateUpdated(
      rate: null
    ): TypedEventFilter<[BigNumber], { rate: BigNumber }>;

    EmissionWeightUpdated(
      numberOfPools: null
    ): TypedEventFilter<[BigNumber], { numberOfPools: BigNumber }>;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;

    NewMiningPool(
      poolTypes: null,
      baseToken: null,
      pool: null
    ): TypedEventFilter<
      [string, string, string],
      { poolTypes: string; baseToken: string; pool: string }
    >;

    Start(): TypedEventFilter<[], {}>;

    TokenEmission(
      amount: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    FOUNDER_SHARE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FOUNDER_SHARE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    INITIAL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_EMISSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emission(overrides?: CallOverrides): Promise<BigNumber>;

    "emission()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionCutRate(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionCutRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionWeekNum(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionWeekNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    factories(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "factories(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    founderPool(overrides?: CallOverrides): Promise<BigNumber>;

    "founderPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolWeight(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolWeight(uint256)"(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,address,address)"(
      _initialEmission: BigNumberish,
      _minEmissionRatePerWeek: BigNumberish,
      _emissionCutRate: BigNumberish,
      _founderShare: BigNumberish,
      _founderPool: string,
      _treasury: string,
      _gov: string,
      _token: string,
      _protocolPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minEmissionRatePerWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "minEmissionRatePerWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    newPool(
      sig: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newPool(bytes4,address)"(
      sig: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolTypes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolPool(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmission(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEmission(address[],uint256[],uint256,uint256)"(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmissionCutRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEmissionCutRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinimumRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FOUNDER_SHARE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FOUNDER_SHARE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_EMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INITIAL_EMISSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emission()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emissionCutRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emissionCutRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emissionPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emissionStarted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionWeekNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emissionWeekNum()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emissionWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factories(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "factories(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    founderPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "founderPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumberOfPools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolWeight(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolWeight(uint256)"(
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,uint256,uint256,address,address,address,address,address)"(
      _initialEmission: BigNumberish,
      _minEmissionRatePerWeek: BigNumberish,
      _emissionCutRate: BigNumberish,
      _founderShare: BigNumberish,
      _founderPool: string,
      _treasury: string,
      _gov: string,
      _token: string,
      _protocolPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minEmissionRatePerWeek(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minEmissionRatePerWeek()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newPool(
      sig: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newPool(bytes4,address)"(
      sig: BytesLike,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolTypes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolTypes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmission(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEmission(address[],uint256[],uint256,uint256)"(
      _miningPools: string[],
      _weights: BigNumberish[],
      _treasury: BigNumberish,
      _caller: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmissionCutRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEmissionCutRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFactory(address)"(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "start()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
