/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DividendPoolInterface extends ethers.utils.Interface {
  functions: {
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claimBatch(address[])": FunctionFragment;
    "claimStartWeek(address,uint256)": FunctionFragment;
    "claimUpTo(address,uint256)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "distribute(address,uint256)": FunctionFragment;
    "distributed(address)": FunctionFragment;
    "distributionBalance(address)": FunctionFragment;
    "distributionOfWeek(address,uint256)": FunctionFragment;
    "distributions(address)": FunctionFragment;
    "epochUnit()": FunctionFragment;
    "featuredRewards()": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "genesis()": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "getEpoch(uint256)": FunctionFragment;
    "getNextEpoch()": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setFeaturedRewards(address[])": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "totalDistributed(address)": FunctionFragment;
    "veLocker()": FunctionFragment;
    "veVISION()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStartWeek",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUpTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "distributed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distributionBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionOfWeek",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "epochUnit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "featuredRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "genesis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeaturedRewards",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "veLocker", values?: undefined): string;
  encodeFunctionData(functionFragment: "veVISION", values?: undefined): string;

  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimStartWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimUpTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionOfWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochUnit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "featuredRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genesis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeaturedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veVISION", data: BytesLike): Result;

  events: {
    "Anarchized()": EventFragment;
    "NewDistribution(address,uint256)": EventFragment;
    "NewGovernance(address,address)": EventFragment;
    "NewReward(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReward"): EventFragment;
}

export class DividendPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DividendPoolInterface;

  functions: {
    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBatch(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimBatch(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimUpTo(
      token: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimUpTo(address,uint256)"(
      token: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimable(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distribute(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "distributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDistribution: BigNumber;
        balance: BigNumber;
      }
    >;

    "distributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDistribution: BigNumber;
        balance: BigNumber;
      }
    >;

    epochUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochUnit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    featuredRewards(overrides?: CallOverrides): Promise<[string[]]>;

    "featuredRewards()"(overrides?: CallOverrides): Promise<[string[]]>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesis(overrides?: CallOverrides): Promise<[BigNumber]>;

    "genesis()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpoch(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEpoch(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    "initialize(address,address)"(
      _gov: string,
      _RIGHT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeaturedRewards(
      featured: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeaturedRewards(address[])"(
      featured: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    veLocker(overrides?: CallOverrides): Promise<[string]>;

    "veLocker()"(overrides?: CallOverrides): Promise<[string]>;

    veVISION(overrides?: CallOverrides): Promise<[string]>;

    "veVISION()"(overrides?: CallOverrides): Promise<[string]>;
  };

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(address)"(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBatch(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimBatch(address[])"(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimStartWeek(
    token: string,
    veLockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimStartWeek(address,uint256)"(
    token: string,
    veLockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimUpTo(
    token: string,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimUpTo(address,uint256)"(
    token: string,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimable(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distribute(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "distributed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  distributionBalance(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "distributionBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributionOfWeek(
    token: string,
    epochNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "distributionOfWeek(address,uint256)"(
    token: string,
    epochNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalDistribution: BigNumber;
      balance: BigNumber;
    }
  >;

  "distributions(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalDistribution: BigNumber;
      balance: BigNumber;
    }
  >;

  epochUnit(overrides?: CallOverrides): Promise<BigNumber>;

  "epochUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

  featuredRewards(overrides?: CallOverrides): Promise<string[]>;

  "featuredRewards()"(overrides?: CallOverrides): Promise<string[]>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  genesis(overrides?: CallOverrides): Promise<BigNumber>;

  "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEpoch(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEpoch(uint256)"(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "getNextEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  "initialize(address,address)"(
    _gov: string,
    _RIGHT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeaturedRewards(
    featured: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeaturedRewards(address[])"(
    featured: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDistributed(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDistributed(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  veLocker(overrides?: CallOverrides): Promise<string>;

  "veLocker()"(overrides?: CallOverrides): Promise<string>;

  veVISION(overrides?: CallOverrides): Promise<string>;

  "veVISION()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(token: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(token: string, overrides?: CallOverrides): Promise<void>;

    claimBatch(tokens: string[], overrides?: CallOverrides): Promise<void>;

    "claimBatch(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUpTo(
      token: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimUpTo(address,uint256)"(
      token: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimable(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimable(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "distributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDistribution: BigNumber;
        balance: BigNumber;
      }
    >;

    "distributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDistribution: BigNumber;
        balance: BigNumber;
      }
    >;

    epochUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "epochUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    featuredRewards(overrides?: CallOverrides): Promise<string[]>;

    "featuredRewards()"(overrides?: CallOverrides): Promise<string[]>;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEpoch(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpoch(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    "initialize(address,address)"(
      _gov: string,
      _RIGHT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeaturedRewards(
      featured: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeaturedRewards(address[])"(
      featured: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veLocker(overrides?: CallOverrides): Promise<string>;

    "veLocker()"(overrides?: CallOverrides): Promise<string>;

    veVISION(overrides?: CallOverrides): Promise<string>;

    "veVISION()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    NewDistribution(
      token: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;

    NewReward(token: null): TypedEventFilter<[string], { token: string }>;
  };

  estimateGas: {
    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBatch(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimBatch(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUpTo(
      token: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimUpTo(address,uint256)"(
      token: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimable(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "distributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "distributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "epochUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    featuredRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "featuredRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEpoch(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpoch(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address,address)"(
      _gov: string,
      _RIGHT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeaturedRewards(
      featured: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeaturedRewards(address[])"(
      featured: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veLocker(overrides?: CallOverrides): Promise<BigNumber>;

    "veLocker()"(overrides?: CallOverrides): Promise<BigNumber>;

    veVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "veVISION()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBatch(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimBatch(address[])"(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimUpTo(
      token: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimUpTo(address,uint256)"(
      token: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribute(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochUnit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    featuredRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "featuredRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesis()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpoch(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpoch(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _gov: string,
      _RIGHT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeaturedRewards(
      featured: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeaturedRewards(address[])"(
      featured: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veLocker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veVISION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
