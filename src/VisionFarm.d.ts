/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VisionFarmInterface extends ethers.utils.Interface {
  functions: {
    "addPlanter(address)": FunctionFragment;
    "anarchize()": FunctionFragment;
    "anarchizedAt()": FunctionFragment;
    "batchDispatch()": FunctionFragment;
    "dispatchFarmers(uint256)": FunctionFragment;
    "dispatchableFarmers(address,uint256)": FunctionFragment;
    "dispatchedFarmers(address,uint256)": FunctionFragment;
    "epochUnit()": FunctionFragment;
    "farms(uint256)": FunctionFragment;
    "forceAnarchize()": FunctionFragment;
    "forceAnarchizeAt()": FunctionFragment;
    "genesis()": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "getHarvestableCrops(uint256)": FunctionFragment;
    "getHarvestableCropsFor(uint256,address)": FunctionFragment;
    "getNextEpoch()": FunctionFragment;
    "gov()": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "harvestAndDispatchToNewFarm()": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "isHarvestable(uint256)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "maximumLock()": FunctionFragment;
    "minimumLock()": FunctionFragment;
    "plantSeeds(address,uint256)": FunctionFragment;
    "remainingLocks(address)": FunctionFragment;
    "removePlanter(address)": FunctionFragment;
    "setAnarchyPoint(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeAndLock(uint256,uint256)": FunctionFragment;
    "stakings(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "visionToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPlanter", values: [string]): string;
  encodeFunctionData(functionFragment: "anarchize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "anarchizedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchDispatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchFarmers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchableFarmers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchedFarmers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epochUnit", values?: undefined): string;
  encodeFunctionData(functionFragment: "farms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "forceAnarchize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAnarchizeAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "genesis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestableCrops",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestableCropsFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAndDispatchToNewFarm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isHarvestable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "maximumLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "plantSeeds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingLocks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePlanter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnarchyPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeAndLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "visionToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addPlanter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anarchize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anarchizedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDispatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchFarmers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchableFarmers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchedFarmers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochUnit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAnarchizeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genesis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestableCrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestableCropsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestAndDispatchToNewFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHarvestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plantSeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePlanter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnarchyPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "visionToken",
    data: BytesLike
  ): Result;

  events: {
    "Anarchized()": EventFragment;
    "NewGovernance(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Anarchized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
}

export class VisionFarm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VisionFarmInterface;

  functions: {
    addPlanter(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPlanter(address)"(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchDispatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchDispatch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispatchFarmers(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dispatchFarmers(uint256)"(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispatchableFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dispatchableFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dispatchedFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dispatchedFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochUnit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    farms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalFarmers: BigNumber }>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalFarmers: BigNumber }>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesis(overrides?: CallOverrides): Promise<[BigNumber]>;

    "genesis()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHarvestableCrops(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "getHarvestableCrops(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    getHarvestableCropsFor(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "getHarvestableCropsFor(uint256,address)"(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    getNextEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest(uint256)"(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestAndDispatchToNewFarm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestAndDispatchToNewFarm()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address,address)"(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHarvestable(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isHarvestable(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lock(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lock(uint256)"(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maximumLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maximumLock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumLock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    plantSeeds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "plantSeeds(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainingLocks(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "remainingLocks(address)"(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removePlanter(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removePlanter(address)"(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAndLock(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakeAndLock(uint256,uint256)"(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; locked: BigNumber }
    >;

    "stakings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; locked: BigNumber }
    >;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    visionToken(overrides?: CallOverrides): Promise<[string]>;

    "visionToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addPlanter(
    planter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPlanter(address)"(
    planter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  batchDispatch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchDispatch()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispatchFarmers(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dispatchFarmers(uint256)"(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispatchableFarmers(
    staker: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dispatchableFarmers(address,uint256)"(
    staker: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dispatchedFarmers(
    staker: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dispatchedFarmers(address,uint256)"(
    staker: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochUnit(overrides?: CallOverrides): Promise<BigNumber>;

  "epochUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

  farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "farms(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forceAnarchize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceAnarchize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

  "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  genesis(overrides?: CallOverrides): Promise<BigNumber>;

  "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  getHarvestableCrops(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "getHarvestableCrops(uint256)"(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  getHarvestableCropsFor(
    epoch: BigNumberish,
    staker: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "getHarvestableCropsFor(uint256,address)"(
    epoch: BigNumberish,
    staker: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "getNextEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  harvest(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest(uint256)"(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestAndDispatchToNewFarm(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestAndDispatchToNewFarm()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    cryptoJobBoard: string,
    marketplace: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address,address)"(
    cryptoJobBoard: string,
    marketplace: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHarvestable(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isHarvestable(uint256)"(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lock(uint256)"(
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maximumLock(overrides?: CallOverrides): Promise<BigNumber>;

  "maximumLock()"(overrides?: CallOverrides): Promise<BigNumber>;

  minimumLock(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumLock()"(overrides?: CallOverrides): Promise<BigNumber>;

  plantSeeds(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "plantSeeds(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainingLocks(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  "remainingLocks(address)"(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removePlanter(
    planter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removePlanter(address)"(
    planter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnarchyPoint(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnarchyPoint(uint256)"(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAndLock(
    amount: BigNumberish,
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakeAndLock(uint256,uint256)"(
    amount: BigNumberish,
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; locked: BigNumber }>;

  "stakings(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; locked: BigNumber }>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unstake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  visionToken(overrides?: CallOverrides): Promise<string>;

  "visionToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addPlanter(planter: string, overrides?: CallOverrides): Promise<void>;

    "addPlanter(address)"(
      planter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    anarchize(overrides?: CallOverrides): Promise<void>;

    "anarchize()"(overrides?: CallOverrides): Promise<void>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    batchDispatch(overrides?: CallOverrides): Promise<void>;

    "batchDispatch()"(overrides?: CallOverrides): Promise<void>;

    dispatchFarmers(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatchFarmers(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dispatchableFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatchableFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dispatchedFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatchedFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "epochUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceAnarchize(overrides?: CallOverrides): Promise<void>;

    "forceAnarchize()"(overrides?: CallOverrides): Promise<void>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHarvestableCrops(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "getHarvestableCrops(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    getHarvestableCropsFor(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "getHarvestableCropsFor(uint256,address)"(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    harvest(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "harvest(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestAndDispatchToNewFarm(overrides?: CallOverrides): Promise<void>;

    "harvestAndDispatchToNewFarm()"(overrides?: CallOverrides): Promise<void>;

    init(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address)"(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isHarvestable(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isHarvestable(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(epochs: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lock(uint256)"(
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumLock(overrides?: CallOverrides): Promise<BigNumber>;

    "maximumLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumLock(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    plantSeeds(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "plantSeeds(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remainingLocks(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingLocks(address)"(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePlanter(planter: string, overrides?: CallOverrides): Promise<void>;

    "removePlanter(address)"(
      planter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAndLock(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeAndLock(uint256,uint256)"(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; locked: BigNumber }
    >;

    "stakings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; locked: BigNumber }
    >;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    visionToken(overrides?: CallOverrides): Promise<string>;

    "visionToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Anarchized(): TypedEventFilter<[], {}>;

    NewGovernance(
      _prevGovernance: string | null,
      _newGovernance: string | null
    ): TypedEventFilter<
      [string, string],
      { _prevGovernance: string; _newGovernance: string }
    >;
  };

  estimateGas: {
    addPlanter(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPlanter(address)"(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anarchizedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    batchDispatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchDispatch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispatchFarmers(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dispatchFarmers(uint256)"(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispatchableFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatchableFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dispatchedFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatchedFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "epochUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    farms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<BigNumber>;

    "forceAnarchizeAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHarvestableCrops(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHarvestableCrops(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHarvestableCropsFor(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHarvestableCropsFor(uint256,address)"(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest(uint256)"(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestAndDispatchToNewFarm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestAndDispatchToNewFarm()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address,address)"(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHarvestable(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isHarvestable(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lock(uint256)"(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maximumLock(overrides?: CallOverrides): Promise<BigNumber>;

    "maximumLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumLock(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    plantSeeds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "plantSeeds(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainingLocks(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingLocks(address)"(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePlanter(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removePlanter(address)"(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAndLock(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakeAndLock(uint256,uint256)"(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    visionToken(overrides?: CallOverrides): Promise<BigNumber>;

    "visionToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPlanter(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPlanter(address)"(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anarchizedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anarchizedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchDispatch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchDispatch()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispatchFarmers(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchFarmers(uint256)"(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispatchableFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dispatchableFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dispatchedFarmers(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dispatchedFarmers(address,uint256)"(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochUnit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farms(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceAnarchize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceAnarchize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceAnarchizeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forceAnarchizeAt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesis()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHarvestableCrops(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHarvestableCrops(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHarvestableCropsFor(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHarvestableCropsFor(uint256,address)"(
      epoch: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNextEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest(uint256)"(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestAndDispatchToNewFarm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestAndDispatchToNewFarm()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address,address)"(
      cryptoJobBoard: string,
      marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHarvestable(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isHarvestable(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lock(uint256)"(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maximumLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maximumLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plantSeeds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "plantSeeds(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainingLocks(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingLocks(address)"(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePlanter(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removePlanter(address)"(
      planter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnarchyPoint(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnarchyPoint(uint256)"(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAndLock(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakeAndLock(uint256,uint256)"(
      amount: BigNumberish,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    visionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "visionToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
