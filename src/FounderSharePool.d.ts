/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FounderSharePoolInterface extends ethers.utils.Interface {
  functions: {
    "_mined(address)": FunctionFragment;
    "allocate(uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "disable(address)": FunctionFragment;
    "disablePermanently(address)": FunctionFragment;
    "dispatchedMiners(address)": FunctionFragment;
    "enable(address)": FunctionFragment;
    "erc20BurnMiningV1()": FunctionFragment;
    "exit()": FunctionFragment;
    "getMineableForPeriod()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "lastTimeMiningApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "mined(address)": FunctionFragment;
    "miningEnds()": FunctionFragment;
    "miningRate()": FunctionFragment;
    "nonRecoverable(address)": FunctionFragment;
    "paidTokenPerMiner(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "permanentlyNonRecoverable(address)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverer()": FunctionFragment;
    "setRecoverer(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenEmitter()": FunctionFragment;
    "tokenPerMiner()": FunctionFragment;
    "totalMiners()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_mined", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "disable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "disablePermanently",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchedMiners",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "enable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "erc20BurnMiningV1",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMineableForPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeMiningApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mined", values: [string]): string;
  encodeFunctionData(
    functionFragment: "miningEnds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "miningRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonRecoverable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "paidTokenPerMiner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permanentlyNonRecoverable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "recoverer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRecoverer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPerMiner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMiners",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_mined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disablePermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchedMiners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20BurnMiningV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMineableForPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeMiningApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miningEnds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miningRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonRecoverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paidTokenPerMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permanentlyNonRecoverable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecoverer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPerMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMiners",
    data: BytesLike
  ): Result;

  events: {
    "Allocated(uint256)": EventFragment;
    "Dispatched(address,uint256)": EventFragment;
    "Mined(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class FounderSharePool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FounderSharePoolInterface;

  functions: {
    _mined(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "_mined(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allocate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allocate(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispatchedMiners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dispatchedMiners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20BurnMiningV1(overrides?: CallOverrides): Promise<[boolean]>;

    "erc20BurnMiningV1()"(overrides?: CallOverrides): Promise<[boolean]>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMineableForPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMineableForPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastTimeMiningApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastTimeMiningApplicable()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mined(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "mined(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    miningEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "miningEnds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    miningRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "miningRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paidTokenPerMiner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "paidTokenPerMiner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverer(overrides?: CallOverrides): Promise<[string]>;

    "recoverer()"(overrides?: CallOverrides): Promise<[string]>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    tokenEmitter(overrides?: CallOverrides): Promise<[string]>;

    "tokenEmitter()"(overrides?: CallOverrides): Promise<[string]>;

    tokenPerMiner(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenPerMiner()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalMiners(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalMiners()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _mined(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "_mined(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allocate(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allocate(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disable(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disable(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disablePermanently(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disablePermanently(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispatchedMiners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "dispatchedMiners(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enable(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enable(address)"(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20BurnMiningV1(overrides?: CallOverrides): Promise<boolean>;

  "erc20BurnMiningV1()"(overrides?: CallOverrides): Promise<boolean>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMineableForPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "getMineableForPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _tokenEmitter: string,
    _baseToken: string,
    _recoverTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _tokenEmitter: string,
    _baseToken: string,
    _recoverTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastTimeMiningApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTimeMiningApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  mined(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "mined(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  miningEnds(overrides?: CallOverrides): Promise<BigNumber>;

  "miningEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

  miningRate(overrides?: CallOverrides): Promise<BigNumber>;

  "miningRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "nonRecoverable(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paidTokenPerMiner(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "paidTokenPerMiner(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  permanentlyNonRecoverable(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "permanentlyNonRecoverable(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverer(overrides?: CallOverrides): Promise<string>;

  "recoverer()"(overrides?: CallOverrides): Promise<string>;

  setRecoverer(
    _recoverer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecoverer(address)"(
    _recoverer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  tokenEmitter(overrides?: CallOverrides): Promise<string>;

  "tokenEmitter()"(overrides?: CallOverrides): Promise<string>;

  tokenPerMiner(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPerMiner()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalMiners(overrides?: CallOverrides): Promise<BigNumber>;

  "totalMiners()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _mined(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_mined(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocate(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "allocate(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disable(_contract: string, overrides?: CallOverrides): Promise<void>;

    "disable(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disablePermanently(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dispatchedMiners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatchedMiners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enable(_contract: string, overrides?: CallOverrides): Promise<void>;

    "enable(address)"(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20BurnMiningV1(overrides?: CallOverrides): Promise<boolean>;

    "erc20BurnMiningV1()"(overrides?: CallOverrides): Promise<boolean>;

    exit(overrides?: CallOverrides): Promise<void>;

    "exit()"(overrides?: CallOverrides): Promise<void>;

    getMineableForPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getMineableForPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTimeMiningApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimeMiningApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mined(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mined(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    miningEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "miningEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    miningRate(overrides?: CallOverrides): Promise<BigNumber>;

    "miningRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paidTokenPerMiner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paidTokenPerMiner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverer(overrides?: CallOverrides): Promise<string>;

    "recoverer()"(overrides?: CallOverrides): Promise<string>;

    setRecoverer(_recoverer: string, overrides?: CallOverrides): Promise<void>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenEmitter(overrides?: CallOverrides): Promise<string>;

    "tokenEmitter()"(overrides?: CallOverrides): Promise<string>;

    tokenPerMiner(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPerMiner()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalMiners(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMiners()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Allocated(
      amount: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Dispatched(
      user: string | null,
      numOfMiners: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; numOfMiners: BigNumber }
    >;

    Mined(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    Recovered(
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    Withdrawn(
      user: string | null,
      numOfMiners: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; numOfMiners: BigNumber }
    >;
  };

  estimateGas: {
    _mined(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "_mined(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allocate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allocate(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispatchedMiners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatchedMiners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20BurnMiningV1(overrides?: CallOverrides): Promise<BigNumber>;

    "erc20BurnMiningV1()"(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMineableForPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getMineableForPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastTimeMiningApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimeMiningApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mined(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mined(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    miningEnds(overrides?: CallOverrides): Promise<BigNumber>;

    "miningEnds()"(overrides?: CallOverrides): Promise<BigNumber>;

    miningRate(overrides?: CallOverrides): Promise<BigNumber>;

    "miningRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonRecoverable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paidTokenPerMiner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paidTokenPerMiner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverer(overrides?: CallOverrides): Promise<BigNumber>;

    "recoverer()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenEmitter()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPerMiner(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPerMiner()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalMiners(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMiners()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _mined(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_mined(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allocate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allocate(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disablePermanently(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disablePermanently(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispatchedMiners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dispatchedMiners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enable(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enable(address)"(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20BurnMiningV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "erc20BurnMiningV1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMineableForPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMineableForPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _tokenEmitter: string,
      _baseToken: string,
      _recoverTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastTimeMiningApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTimeMiningApplicable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mined(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mined(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    miningEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "miningEnds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "miningRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paidTokenPerMiner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paidTokenPerMiner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permanentlyNonRecoverable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permanentlyNonRecoverable(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recoverer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRecoverer(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecoverer(address)"(
      _recoverer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenEmitter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPerMiner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPerMiner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMiners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalMiners()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
