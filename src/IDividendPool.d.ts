/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IDividendPoolInterface extends ethers.utils.Interface {
  functions: {
    "claimStartWeek(address,uint256)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "distribute(address,uint256)": FunctionFragment;
    "distributedToken(uint256)": FunctionFragment;
    "distributedTokens()": FunctionFragment;
    "distributionBalance(address)": FunctionFragment;
    "distributionOfWeek(address,uint256)": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "totalDistributed(address)": FunctionFragment;
    "veLocker()": FunctionFragment;
    "veVISION()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimStartWeek",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionOfWeek",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "veLocker", values?: undefined): string;
  encodeFunctionData(functionFragment: "veVISION", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimStartWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionOfWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veVISION", data: BytesLike): Result;

  events: {};
}

export class IDividendPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDividendPoolInterface;

  functions: {
    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimable(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distribute(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "distribute(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributedToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "distributedToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    distributedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "distributedTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    veLocker(overrides?: CallOverrides): Promise<[string]>;

    "veLocker()"(overrides?: CallOverrides): Promise<[string]>;

    veVISION(overrides?: CallOverrides): Promise<[string]>;

    "veVISION()"(overrides?: CallOverrides): Promise<[string]>;
  };

  claimStartWeek(
    token: string,
    veLockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimStartWeek(address,uint256)"(
    token: string,
    veLockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimable(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distribute(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "distribute(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributedToken(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "distributedToken(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "distributedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  distributionBalance(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "distributionBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributionOfWeek(
    token: string,
    epochNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "distributionOfWeek(address,uint256)"(
    token: string,
    epochNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalDistributed(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDistributed(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  veLocker(overrides?: CallOverrides): Promise<string>;

  "veLocker()"(overrides?: CallOverrides): Promise<string>;

  veVISION(overrides?: CallOverrides): Promise<string>;

  "veVISION()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributedToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "distributedToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veLocker(overrides?: CallOverrides): Promise<string>;

    "veLocker()"(overrides?: CallOverrides): Promise<string>;

    veVISION(overrides?: CallOverrides): Promise<string>;

    "veVISION()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "distribute(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributedToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributedToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veLocker(overrides?: CallOverrides): Promise<BigNumber>;

    "veLocker()"(overrides?: CallOverrides): Promise<BigNumber>;

    veVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "veVISION()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimStartWeek(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimStartWeek(address,uint256)"(
      token: string,
      veLockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribute(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributedToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributedToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionOfWeek(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionOfWeek(address,uint256)"(
      token: string,
      epochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDistributed(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDistributed(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veLocker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veVISION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
